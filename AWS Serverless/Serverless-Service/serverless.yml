service: serverless-service-new

custom:
  settings:
    IMAGE_METADATA_TABLE_NAME: images-metadata
    SECRET_KEY: ${ssm:learning-serverless-secret-token}

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: Admin
  region: us-east-1
  stage: dev
  environment: ${self:custom.settings}
  apiKeys:
    - learning-serverless-api-keys
  usagePlan:
    quota:
      limit: 10
      offset: 0
      period: DAY
    throttle:
      burstLimit: 10
      rateLimit: 10

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s2:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::chiru-serverless-service-learning-008/*"
    - Effect: "Allow"
      Action:
        - "states:ListStateMachines"
        - "states:StartExecution"
      Resource: "arn:aws:states:*:*:*"
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.IMAGE_METADATA_TABLE_NAME}"

functions:
  resizeImage:
    handler: handler.resizeImage
  executeStepFunction:
    handler: handler.executeStepFunction
    events:
      - s3:
          bucket: chiru-serverless-service-learning-008
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads
            - suffix: .jpg
  thumbnails:
    handler: handler.thumbnails
    events:
      - s3:
          bucket: chiru-serverless-service-learning-008
          event: s3:ObjectCreated:*
          rules:
            - prefix: resized-uploads
            - suffix: .jpg
  saveImageMetaData:
    handler: handler.saveImageMetaData
  squareImage:
    handler: handler.squareImage
  getImageMetaData:
    handler: handler.getImageMetaData
    events:
      - http:
          path: image/{imageId}
          method: GET
          authorizer: authorize
  generateToken:
    handler: authorizationHandler.generateToken
    events:
      - http:
          path: register
          method: POST
          private: true
  authorize:
    handler: authorizationHandler.authorize

stepFunctions:
  # validate: true
  stateMachines:
    imageProcessingMachine:
      definition:
        Comment: "image processing state machine"
        StartAt: Parallel
        States:
          Parallel:
            Type: Parallel
            Next: FinalState
            Branches:
              - StartAt: ResizeImage
                States:
                  ResizeImage:
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-resizeImage"
                    End: true
              - StartAt: SaveImageMetaData
                States:
                  SaveImageMetaData:
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-saveImageMetaData"
                    End: true
              - StartAt: SquareImage
                States:
                  SquareImage:
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-squareImage"
                    End: true
          FinalState:
            Type: Pass
            End: true

resources:
  Resources:
    ImageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "ImageId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "ImageId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.IMAGE_METADATA_TABLE_NAME}
